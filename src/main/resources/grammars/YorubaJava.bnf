{
  // Grammar-Kit directives for custom names and packages
  parserClass = "com.github.tundeadetunji.yorubajava.YorubaJavaParser";
  elementTypeHolderClass = "com.github.tundeadetunji.yorubajava.YorubaJavaTypes";
  parserClassPackage = "com.github.tundeadetunji.yorubajava.parser";
  elementTypeHolderClassPackage = "com.github.tundeadetunji.yorubajava.psi";
}

// Grammar-Kit BNF for Yoruba Java (simple Java subset with Yoruba keywords)
// Root rule: The entire file
yorubaJavaFile ::= (statement)* EOF ;

// Statements: Classes, methods, ifs, expressions
statement ::= classDeclaration | methodDeclaration | ifStatement | expressionStatement | ';' ;

// Class declaration
classDeclaration ::= YORUBA_CLASS IDENTIFIER '{' (fieldDeclaration)* (methodDeclaration)* '}' ;

// Field declaration (e.g., public int x = 5;)
fieldDeclaration ::= (YORUBA_PUBLIC)? type IDENTIFIER '=' literal ';' ;

// Method declaration (focus on main for simplicity)
methodDeclaration ::= YORUBA_PUBLIC YORUBA_STATIC YORUBA_VOID YORUBA_MAIN '(' STRING_TYPE ARRAY_BRACKETS IDENTIFIER ')' '{' (statement)* '}' ;

// If-else statement
ifStatement ::= YORUBA_IF '(' expression ')' '{' (statement)* '}' (YORUBA_ELSE '{' (statement)* '}')? ;

// Expression statement (print or assignment)
expressionStatement ::= YORUBA_PRINT '(' STRING_LITERAL ')' ';' | assignment ';' ;

// Assignment (e.g., x = 5;)
assignment ::= IDENTIFIER '=' literal ;

// Expression (simple: literals, IDs, + ops)
expression ::= literal | IDENTIFIER | expression '+' expression | expression '-' expression | expression '*' expression | expression '/' expression | '(' expression ')' ;

// Literals (numbers, strings, booleans, null)
literal ::= NUMBER | STRING_LITERAL | YORUBA_BOOLEAN | YORUBA_NULL ;

// Types (Yoruba variants)
type ::= YORUBA_INT_TYPE | YORUBA_STRING_TYPE ;

// Tokens: REFERENCES to lexer tokens (defined in Flex) - Renamed to avoid Java clashes
YORUBA_CLASS ::= 'kíláàsì' | 'ìṣọ̀rí' | 'isori' | 'kilasi' ;
YORUBA_PUBLIC ::= 'gbangba' ;
YORUBA_STATIC ::= 'àìmì' | 'aimi' ;
YORUBA_VOID ::= 'òfo' | 'ofo' ;
YORUBA_MAIN ::= 'àkọ́kọ́' | 'akoko' ;
YORUBA_STRING_TYPE ::= 'okùn' | 'okun' ;
YORUBA_INT_TYPE ::= 'nọmba' | 'nomba' ;
YORUBA_IF ::= 'tí' | 'ti' ;
YORUBA_ELSE ::= 'tí kò ṣe bẹ́ẹ̀' | 'eko se bee' | 'else' ;
YORUBA_PRINT ::= 'tẹ' | 'te' | 'print' ;
YORUBA_BOOLEAN ::= 'òtítọ́' | 'true' | 'òdì' | 'false' ;
YORUBA_NULL ::= 'null' ;

// Other tokens (lexer-defined; no conflicts)
IDENTIFIER, NUMBER, STRING_LITERAL, SEMICOLON, LBRACE, RBRACE, LPAREN, RPAREN, ASSIGN, PLUS, MINUS, MULT, DIV, ARRAY_BRACKETS ;
WHITE_SPACE, LINE_COMMENT, BLOCK_COMMENT, BAD_CHARACTER ;

// Associates left for expressions (prevents ambiguity)
%left PLUS MINUS ;
%left MULT DIV ;